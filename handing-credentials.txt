Rails 4.1 introduced secrets.yml. The default file has secret_key_base. You can also store access keys to external APIs, http basic login and other sensitive credentials.

```
development:
  secret_key_base: 3b7cd727ee24e8444053437c36cc66c3
  some_api_key: SOMEKEY
```  
  
You can now access the values in development by:

```
Rails.application.secrets.some_api_key
```

Instead of having a dependency on Rails.application.secrets that might change in the future, we can create a class and encapsulate this behind a stable interface like this:

```
class Credential
  def self.some_api_key
    Rails.application.secrets.some_api_key
  end
end
```

Now you will depend only on this stable interface throughout your application.

```
Credential.some_api_key
```

This isolates any changes to the way Rails exposes the values to one Credential class. The sensitive values are hard-coded in the secrets.yml and we add it to .gitignore to prevent checking it into source control. A better way is not to hard-code the credentials and use environment variables. The secrets.yml will look like this:

```
development:
  secret_key_base: 3b7cd727ee24e8444053437c36cc66c3
  some_api_key: ENV[SOMEKEY]
```

In production, you need to define the values in ~/.bashrc like this:

```
SOMEKEY='thisisverysecret'
```

Add image to this article https://rubyplus.com/articles/4191-How-to-Expose-Local-Rails-App-to-the-Public-Internet

https://4.bp.blogspot.com/--WhN1iSV9_s/V37G16BPGKI/AAAAAAAABLU/AiKZpRdV8Do3QXHI3VabA_xNz0hbmIehgCLcB/s1600/Screen%2BShot%2B2016-07-06%2Bat%2B1.30.58%2BPM.png
