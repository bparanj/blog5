Counter Cache Column in Rails 5

## Steps
### Step 1

Project has many tasks. The index action in projects controller looks like this:

```ruby
def index
  @projects = Project.all
end
```

### Step 2

The `projects/index.html.erb` view lists all project name and the number of tasks for that project. 

```ruby
<% @projects.each do |project| %>
  <tr>
    <td><%= project.name %></td>
	<td><%= pluralize(project.tasks.size, 'task') %></td>
  </tr>
<% end %>
```

### Step 3

Browse to `http://localhost:3000/projects`. 

```sh
Started GET "/projects" for ::1 at 2016-03-16 13:47:08 -0700
  ActiveRecord::SchemaMigration Load (0.2ms)  SELECT "schema_migrations".* FROM "schema_migrations"
Processing by ProjectsController#index as HTML
  Project Load (0.1ms)  SELECT "projects".* FROM "projects"
   (0.2ms)  SELECT COUNT(*) FROM "tasks" WHERE "tasks"."project_id" = ?  [["project_id", 1]]
   (0.1ms)  SELECT COUNT(*) FROM "tasks" WHERE "tasks"."project_id" = ?  [["project_id", 2]]
   (0.1ms)  SELECT COUNT(*) FROM "tasks" WHERE "tasks"."project_id" = ?  [["project_id", 3]]
  Rendered projects/index.html.erb within layouts/application (25.4ms)
Completed 200 OK in 202ms (Views: 190.5ms | ActiveRecord: 1.3ms)
```

You can see three + 1 SQL queries in the development log file.

### Step 4

We want to reduce `count(*)` to one query. Eager loading is one way. It retrieves more columns than just the count. This uses more bandwidth and time. Create the migration to add_tasks_count column to the projects table.

```sh
rails g migration add_tasks_count
```

Modify the migration file like this:

```ruby
class AddTasksCount < ActiveRecord::Migration[5.0]
  def change
    add_column :projects, :tasks_count, :integer, default: 0
  end
end
```

Migrate the database.

```sh
rails db:migrate
```

Create a rake task `counter_cache.rake` in lib/tasks:


```ruby
desc 'Counter cache for project has many tasks'

task task_counter: :environment do
  Project.reset_column_information
  Project.pluck(:id).find_each do |p|
    Project.reset_counters p.id, :tasks
  end
end
```

The `reset_counters` method avoids the readonly error if you use `update_attribute`. This will update the old projects to have the right task count.

The `reset_column_information` method resets all the cached information about columns, which will cause them to be reloaded on the next request. The most common usage pattern for this method is probably in a migration, when just after creating a table you want to populate it with some default values.

### Step 

Run rake `task_counter` rake task. We can check whether the tasks_count has been populated or not in rails console.

```sh
> p = Project.first
  Project Load (0.2ms)  SELECT  "projects".* FROM "projects" ORDER BY "projects"."id" ASC LIMIT ?  [["LIMIT", 1]]
 => #<Project id: 1, name: "Wealth Building", created_at: "2016-03-16 19:07:26", updated_at: "2016-03-16 20:55:29", tasks_count: 2> 
> Project.last
  Project Load (0.2ms)  SELECT  "projects".* FROM "projects" ORDER BY "projects"."id" DESC LIMIT ?  [["LIMIT", 1]]
 => #<Project id: 3, name: "Cooking", created_at: "2016-03-16 20:06:26", updated_at: "2016-03-16 20:06:26", tasks_count: 0> 
```
  
### Step 

In schema.rb, you can see the tasks_count column for projects table.

```ruby
create_table "projects", force: :cascade do |t|
  t.string   "name"
  t.datetime "created_at",              null: false
  t.datetime "updated_at",              null: false
  t.integer  "tasks_count", default: 0
end
```

### Step 

Change the projects/index.html.erb to use the tasks_count field:

```sh
<td><%= pluralize(project.tasks_count, 'task') %></td>
```
		
### Step 

Reload project index page and view the log for SQL queries.

```sh
Started GET "/projects" for ::1 at 2016-03-16 14:04:22 -0700
Processing by ProjectsController#index as HTML
  Project Load (0.1ms)  SELECT "projects".* FROM "projects"
  Rendered projects/index.html.erb within layouts/application (1.6ms)
Completed 200 OK in 48ms (Views: 45.6ms | ActiveRecord: 0.1ms)
```

You see that there is only one query now instead of 4 queries before using the counter cache.

### Step 

Let's add a new task to the last project in the rails console.

```sh
 > Project.last
  Project Load (0.2ms)  SELECT  "projects".* FROM "projects" ORDER BY "projects"."id" DESC LIMIT ?  [["LIMIT", 1]]
 => #<Project id: 3, name: "Cooking", created_at: "2016-03-16 20:06:26", updated_at: "2016-03-16 20:06:26", tasks_count: 0> 
 > p.tasks.create(name: 'Add counter cache')
   (0.1ms)  begin transaction
  SQL (0.7ms)  INSERT INTO "tasks" ("name", "created_at", "updated_at", "project_id") VALUES (?, ?, ?, ?)  [["name", "Add counter cache"], ["created_at", 2016-03-16 21:09:25 UTC], ["updated_at", 2016-03-16 21:09:25 UTC], ["project_id", 1]]
   (0.7ms)  commit transaction
 => #<Task id: 11, name: "Add counter cache", complete: nil, created_at: "2016-03-16 21:09:25", updated_at: "2016-03-16 21:09:25", project_id: 1, priority: nil> 
```

Reload the page. The Cooking project still has 0 tasks. Let's fix this problem.

### Step 

Add counter cache to Task model.

```ruby
belongs_to :project, counter_cache: true
```

This will update when the task is deleted or created.

### Step 

In the console, retrieve the first project and delete a task that belongs to that project.

```sh
> f = Project.first
  Project Load (0.1ms)  SELECT  "projects".* FROM "projects" ORDER BY "projects"."id" ASC LIMIT ?  [["LIMIT", 1]]
 => #<Project id: 1, name: "Wealth Building", created_at: "2016-03-16 19:07:26", updated_at: "2016-03-16 20:55:29", tasks_count: 2> 
  f.tasks.map(&:id)
  Task Load (0.1ms)  SELECT "tasks".* FROM "tasks" WHERE "tasks"."project_id" = ?  [["project_id", 1]]
=> [1, 2, 11] 
 > f.name
 => "Wealth Building" 
> Task.destroy(1)
  Task Load (0.1ms)  SELECT  "tasks".* FROM "tasks" WHERE "tasks"."id" = ? LIMIT ?  [["id", 1], ["LIMIT", 1]]
   (0.0ms)  begin transaction
  SQL (0.6ms)  DELETE FROM "tasks" WHERE "tasks"."id" = ?  [["id", 1]]
   (0.5ms)  commit transaction
 => #<Task id: 1, name: "Get rich quick", complete: false, created_at: "2016-03-16 19:07:26", updated_at: "2016-03-16 19:07:26", project_id: 1, priority: 4> 
``` 

Reload the project index page `http://localhost:3000/projects'. You will now see the number of tasks decremented for Wealth Building project.

References

[Select vs Pluck](http://gavinmiller.io/2013/getting-to-know-pluck-and-select/ 'Select vs Pluck')

http://railscasts.com/episodes/23-counter-cache-column?view=comments

