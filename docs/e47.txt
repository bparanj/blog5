Has Many Through and Has and Belongs to Many in Rails 5



## Steps
### Step 1

Create a category model with name attribute.

```
rails g model category name
```

In Rails 5, if you don't provide the column type, it defaults to string.

```ruby
class CreateCategories < ActiveRecord::Migration[5.0]
  def change
    create_table :categories do |t|
      t.string :name

      t.timestamps
    end
  end
end
```

### Step 2

Create a product model with name attribute.

```ruby
rails g model product name
```

Here is the generated Migration file for products.

```ruby
class CreateProducts < ActiveRecord::Migration[5.0]
  def change
    create_table :products do |t|
      t.string :name

      t.timestamps
    end
  end
end
```

Rails 5 creates the attribute with string as the default type. 

### Step 3

For the has_and_belongs_to_many association, let's create a join table.

```
rails g migration CreateJoinTableCategoryProduct category product
```

If you use CreateJoinTableTableName1TableName2 model1 model2 for migration, Rails 5 migration generator will automatically create the migration file with the appropriate join table with index like this:

```ruby
class CreateJoinTableCategoryProduct < ActiveRecord::Migration[5.0]
  def change
    create_join_table :categories, :products do |t|
      t.index [:category_id, :product_id]
    end
  end
end
```

### Step 4

```
rails db:migrate
```

In schema.rb, you can see the index and the join table:

```ruby
ActiveRecord::Schema.define(version: 20160329172233) do

  create_table "categories", force: :cascade do |t|
    t.string   "name"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
  end

  create_table "categories_products", id: false, force: :cascade do |t|
    t.integer "category_id", null: false
    t.integer "product_id",  null: false
  end

  add_index "categories_products", ["category_id", "product_id"], name: "index_categories_products_on_category_id_and_product_id"

  create_table "products", force: :cascade do |t|
    t.string   "name"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
  end

end
```

### Step 5


```ruby
class Product < ApplicationRecord
  has_and_belongs_to_many :categories
end
```

```ruby
class Category < ApplicationRecord
  has_and_belongs_to_many :products
end
```

-

Has Many Through

Create a join model

```
rails g model categorization product_id:integer category_id:integer position:integer
```

```ruby
class CreateCategorizations < ActiveRecord::Migration[5.0]
  def change
    create_table :categorizations do |t|
      t.integer :product_id
      t.integer :category_id
      t.integer :position

      t.timestamps
    end
    
    add_index :categorizations, [:product_id, :category_id]
  end
end
```


tion
ship
ment

-

```
rails db:migrate
```

```ruby
ActiveRecord::Schema.define(version: 20160329173814) do

  create_table "categories", force: :cascade do |t|
    t.string   "name"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
  end

  create_table "categories_products", id: false, force: :cascade do |t|
    t.integer "category_id", null: false
    t.integer "product_id",  null: false
  end

  add_index "categories_products", ["category_id", "product_id"], name: "index_categories_products_on_category_id_and_product_id"

  create_table "categorizations", force: :cascade do |t|
    t.integer  "product_id"
    t.integer  "category_id"
    t.integer  "position"
    t.datetime "created_at",  null: false
    t.datetime "updated_at",  null: false
  end

  add_index "categorizations", ["product_id", "category_id"], name: "index_categorizations_on_product_id_and_category_id"

  create_table "products", force: :cascade do |t|
    t.string   "name"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
  end

end
```

-

```ruby
class Categorization < ApplicationRecord
  belongs_to :product
  belongs_to :category
end
```

```ruby
class Product < ApplicationRecord
  has_many :categorizations
  has_many :categories, through: :categorizations
end
```

```ruby
class Category < ApplicationRecord
  has_many :categorizations
  has_many :products, through: :categorizations
end
```

## Summary

In this aricle, you learned how to use has_and_belongs_to_many and has_many through associations in Rails 5

-

http://railscasts.com/episodes/47-two-many-to-many?view=comments





-