Has Many Through Checkboxes

1

```
rails g model category name:string
```

2

Create categories in seeds.rb:

Clothes
Furniture
Groceries
Electronics

3

Category has_and_belongs_to_many :products

4

```
rake db:migrate
== 20160314195042 CreateCategories: migrating =================================
-- create_table(:categories)
   -> 0.0141s
== 20160314195042 CreateCategories: migrated (0.0142s) ========================

 $ rake db:seed
 $ rails c
Loading development environment (Rails 5.0.0.beta3)
 > Category.count
   (0.1ms)  SELECT COUNT(*) FROM "categories"
 => 4 
```

5

Create product model and controller.

```
$ rails g scaffold product name:string price:decimal
```

product has name, price 

```
class Product < ApplicationRecord
  has_and_belongs_to_many :category
end
```

6

Change the migration file:

``` 
class CreateProducts < ActiveRecord::Migration[5.0]
  def change
    create_table :products do |t|
      t.string :name
      t.decimal :price, :precision => 8, :scale => 2

      t.timestamps
    end
  end
end
```
 
Create the join table:

```
rails g migration create_categories_products category_id:integer product_id:integer
```

```
class CreateAtegoriesProductsTable < ActiveRecord::Migration[5.0]
  def change
    create_table :categories_products do |t|
      t.integer :category_id
      t.integer :product_id
    end
  end
end
```

7

To remove existing data and recreate all tables.

```
$ rake db:drop db:create db:migrate
```

8

 seeds.rb:

```
p = Product.new(name: 'rug', price: 100)
Product.create(name: 'bowl', price: 20.95)
Product.create(name: 'pillow', price: 90)
Product.create(name: 'light', price: 10.95)

c = Category.create(name: 'Clothes')
Category.create(name: 'Furniture')
Category.create(name: 'Groceries')
Category.create(name: 'Electronics')

p.categories << c
p.save!
```

```
rake db:seed
```


9

```
$ rails c
Loading development environment (Rails 5.0.0.beta3)
 > Product.count
   (0.1ms)  SELECT COUNT(*) FROM "products"
 => 4 
 > Category.count
   (0.1ms)  SELECT COUNT(*) FROM "categories"
 => 4 
 > p = Product.last
  Product Load (0.1ms)  SELECT  "products".* FROM "products" ORDER BY "products"."id" DESC LIMIT ?  [["LIMIT", 1]]
 => #<Product id: 4, name: "rug", price: #<BigDecimal:7fb9b23006d8,'0.1E3',9(18)>, created_at: "2016-03-14 20:29:30", updated_at: "2016-03-14 20:29:30"> 
 > p.categories.to_a
  Category Load (0.1ms)  SELECT "categories".* FROM "categories" INNER JOIN "categories_products" ON "categories"."id" = "categories_products"."category_id" WHERE "categories_products"."product_id" = ?  [["product_id", 4]]
 => [#<Category id: 1, name: "Clothes", created_at: "2016-03-14 20:29:30", updated_at: "2016-03-14 20:29:30">] 
```
 
10

products/index.html.erb

List all products on index page with edit and destroy links. `http://localhost:3000/products`

11

Clicking on product name takes to product show page. Product show page has Edit and All Products link.

12

`products/show.html.erb`

In Categories:

on the product show page is blank. 

13

Add to product edit form partial:

```
<% for category in Category.find(:all) %>
<div>
  <%= check_box_tag "product[category_ids][]", category.id, @product.categories.include?(category) %>
  <%= category.name %>
</div>
<% end %>
```

14

Go to products/edit/1 and check two categories and click update. 

```
def product_params
  params.require(:product).permit(:name, :price, :category_ids)
end
```

```
Started PATCH "/products/4" for ::1 at 2016-03-14 13:41:24 -0700
Processing by ProductsController#update as HTML
  Parameters: {"utf8"=>"✓", "authenticity_token"=>"Nt7GRCRGElzpiVEud0NdADa+3h2k5hAWl7wi7H+Imi0TEdcZ7pmyNBY1Mj1gxj9LyT15U+BwIlYTVyl6S/2pyg==", "product"=>{"name"=>"rug", "price"=>"100.0", "category_ids"=>["1", "2"]}, "commit"=>"Update product", "id"=>"4"}
  Product Load (0.1ms)  SELECT  "products".* FROM "products" WHERE "products"."id" = ? LIMIT ?  [["id", 4], ["LIMIT", 1]]
Unpermitted parameter: category_ids
   (0.1ms)  begin transaction
   (0.0ms)  commit transaction
Redirected to http://localhost:3000/products/4
Completed 302 Found in 4ms (ActiveRecord: 0.3ms)
```

Display product in show page with In Categories populated.

To fix the error, change product_params:

```
def product_params
  params.require(:product).permit!
end
```

15

View the development log, update action, parameters, category_ids.

```
Started PATCH "/products/4" for ::1 at 2016-03-14 14:59:07 -0700
Processing by ProductsController#update as HTML
  Parameters: {"utf8"=>"✓", "authenticity_token"=>"UeAoAINcnvDHkntnFRXlu8XDHhMP6O07IdCNnM5xKDexDnXVHPM5B99Rj/msECz+jOBkG9NvAweB/phyRlIe8w==", "product"=>{"name"=>"rug", "price"=>"100.0", "category_ids"=>["1", "3", "4"]}, "commit"=>"Update product", "id"=>"4"}
  Product Load (0.1ms)  SELECT  "products".* FROM "products" WHERE "products"."id" = ? LIMIT ?  [["id", 4], ["LIMIT", 1]]
   (0.0ms)  begin transaction
  Category Load (0.2ms)  SELECT "categories".* FROM "categories" WHERE "categories"."id" IN (1, 3, 4)
  Category Load (0.1ms)  SELECT "categories".* FROM "categories" INNER JOIN "categories_products" ON "categories"."id" = "categories_products"."category_id" WHERE "categories_products"."product_id" = ?  [["product_id", 4]]
  SQL (0.5ms)  INSERT INTO "categories_products" ("category_id", "product_id") VALUES (?, ?)  [["category_id", 3], ["product_id", 4]]
   (0.4ms)  commit transaction
Redirected to http://localhost:3000/products/4
Completed 302 Found in 16ms (ActiveRecord: 1.3ms)
```


```
Started GET "/products/4" for ::1 at 2016-03-14 14:59:07 -0700
Processing by ProductsController#show as HTML
  Parameters: {"id"=>"4"}
  Product Load (0.1ms)  SELECT  "products".* FROM "products" WHERE "products"."id" = ? LIMIT ?  [["id", 4], ["LIMIT", 1]]
  Category Load (0.1ms)  SELECT "categories".* FROM "categories" INNER JOIN "categories_products" ON "categories"."id" = "categories_products"."category_id" WHERE "categories_products"."product_id" = ?  [["product_id", 4]]
  Rendered products/show.html.erb within layouts/application (2.5ms)
Completed 200 OK in 38ms (Views: 35.5ms | ActiveRecord: 0.2ms)
```

16

Console

```
$ rails c
Loading development environment (Rails 5.0.0.beta3)
 > p = Product.first
  Product Load (0.2ms)  SELECT  "products".* FROM "products" ORDER BY "products"."id" ASC LIMIT ?  [["LIMIT", 1]]
 => #<Product id: 1, name: "bowl", price: #<BigDecimal:7ff78af69468,'0.2095E2',18(27)>, created_at: "2016-03-14 20:29:30", updated_at: "2016-03-14 20:29:30"> 
 > p.category_ids
   (0.1ms)  SELECT "categories".id FROM "categories" INNER JOIN "categories_products" ON "categories"."id" = "categories_products"."category_id" WHERE "categories_products"."product_id" = ?  [["product_id", 1]]
 => [] 
 > p = Product.last
  Product Load (0.2ms)  SELECT  "products".* FROM "products" ORDER BY "products"."id" DESC LIMIT ?  [["LIMIT", 1]]
 => #<Product id: 4, name: "rug", price: #<BigDecimal:7ff78ac7d790,'0.1E3',9(18)>, created_at: "2016-03-14 20:29:30", updated_at: "2016-03-14 20:29:30"> 
 > p.category_ids
   (0.2ms)  SELECT "categories".id FROM "categories" INNER JOIN "categories_products" ON "categories"."id" = "categories_products"."category_id" WHERE "categories_products"."product_id" = ?  [["product_id", 4]]
 => [1, 4, 3] 
 > p.category_ids = [2,3]
  Category Load (0.3ms)  SELECT "categories".* FROM "categories" WHERE "categories"."id" IN (2, 3)
  Category Load (0.2ms)  SELECT "categories".* FROM "categories" INNER JOIN "categories_products" ON "categories"."id" = "categories_products"."category_id" WHERE "categories_products"."product_id" = ?  [["product_id", 4]]
   (0.0ms)  begin transaction
  SQL (0.3ms)  DELETE FROM "categories_products" WHERE "categories_products"."product_id" = ? AND "categories_products"."category_id" IN (1, 4)  [["product_id", 4]]
  SQL (0.1ms)  INSERT INTO "categories_products" ("category_id", "product_id") VALUES (?, ?)  [["category_id", 2], ["product_id", 4]]
   (0.5ms)  commit transaction
 => [2, 3] 
```

Notice that we don't need to call save explicitly.

category_ids is provided by habm association.

17

Uncheck all the boxes and update. Does it remove categories associated with that product? No.

```
Started PATCH "/products/4" for ::1 at 2016-03-14 15:23:24 -0700
Processing by ProductsController#update as HTML
  Parameters: {"utf8"=>"✓", "authenticity_token"=>"iRTf7sobiLnrSs3HNfW60pSePwkKXY9gCHsFxFp2f2Np+oI7VbQvTvOJOVmM8HOX3b1FAdbaYVyoVRAq0lVJpw==", "product"=>{"name"=>"rug", "price"=>"100.0"}, "commit"=>"Update product", "id"=>"4"}
  Product Load (0.3ms)  SELECT  "products".* FROM "products" WHERE "products"."id" = ? LIMIT ?  [["id", 4], ["LIMIT", 1]]
   (0.0ms)  begin transaction
   (0.4ms)  commit transaction
Redirected to http://localhost:3000/products/4
Completed 302 Found in 4ms (ActiveRecord: 0.7ms)
```

```
Started GET "/products/4" for ::1 at 2016-03-14 15:23:24 -0700
Processing by ProductsController#show as HTML
  Parameters: {"id"=>"4"}
  Product Load (0.4ms)  SELECT  "products".* FROM "products" WHERE "products"."id" = ? LIMIT ?  [["id", 4], ["LIMIT", 1]]
  Category Load (0.1ms)  SELECT "categories".* FROM "categories" INNER JOIN "categories_products" ON "categories"."id" = "categories_products"."category_id" WHERE "categories_products"."product_id" = ?  [["product_id", 4]]
  Rendered products/show.html.erb within layouts/application (2.9ms)
Completed 200 OK in 45ms (Views: 40.5ms | ActiveRecord: 0.5ms)
```


def update
  params[:product][:category_ids] ||=[]

```
def update
  params[:product][:category_ids] ||=[]
  respond_to do |format|
    if @product.update_attributes(product_params)
      format.html { redirect_to @product, notice: 'Product was successfully updated.' }
      format.json { render :show, status: :ok, location: @product }
    else
      format.html { render :edit }
      format.json { render json: @product.errors, status: :unprocessable_entity }
    end
  end
end
```

Now it will delete when we unselect the check boxes.


Note: The join table categories_products does not have id column.


<%= check_box_tag "product[category_ids][]", category.id, @product.categories.include?(category), {:id => dom_id(category, dom_id(@product)) } %>

generates:

<input type="checkbox" name="product[category_ids][]" id="product_2_category_1" value="1" />

otherwise it is:

<input type="checkbox" name="product[category_ids][]" id="product_category_ids_" value="1" />

id is product_category_ids_ for all check boxes.

You can make the check boxes to multiple selection:

<div>
	<%= select_tag "product[category_ids][]", options_from_collection_for_select(Category.all, "id", "name"), :multiple => true %>
</div>


class Product < ApplicationRecord
  has_and_belongs_to_many :categories
  
  validates_presence_of :name
end

Make the product name blank and update product. Fail saves and the transaction is rolled back. This is correct behavior.

```
Started PATCH "/products/4" for ::1 at 2016-03-14 16:48:20 -0700
Processing by ProductsController#update as HTML
  Parameters: {"utf8"=>"✓", "authenticity_token"=>"zZkOscnXAalDBKU6jprRh+UOEpvMlO0otMFq8dj2Q0773subQUxlGtvXUQWPSz0mtrUdoL+AY0Th6U3ogPajkQ==", "product"=>{"name"=>"", "price"=>"100.0", "category_ids"=>["1", "2", "3", "4"]}, "commit"=>"Update product", "id"=>"4"}
  Product Load (0.2ms)  SELECT  "products".* FROM "products" WHERE "products"."id" = ? LIMIT ?  [["id", 4], ["LIMIT", 1]]
   (0.1ms)  begin transaction
  Category Load (0.2ms)  SELECT "categories".* FROM "categories" WHERE "categories"."id" IN (1, 2, 3, 4)
  Category Load (0.1ms)  SELECT "categories".* FROM "categories" INNER JOIN "categories_products" ON "categories"."id" = "categories_products"."category_id" WHERE "categories_products"."product_id" = ?  [["product_id", 4]]
  SQL (1.1ms)  INSERT INTO "categories_products" ("category_id", "product_id") VALUES (?, ?)  [["category_id", 1], ["product_id", 4]]
  SQL (0.0ms)  INSERT INTO "categories_products" ("category_id", "product_id") VALUES (?, ?)  [["category_id", 2], ["product_id", 4]]
   (0.5ms)  rollback transaction
  Category Load (0.1ms)  SELECT "categories".* FROM "categories"
  Rendered products/_form.html.erb (3.4ms)
  Rendered products/edit.html.erb within layouts/application (4.8ms)
Completed 200 OK in 49ms (Views: 35.3ms | ActiveRecord: 2.2ms)
```

Allow category_ids:

def product_params
  params.require(:product).permit(:name, :price, {category_ids: []})
end




Cleaned Up 

```
<div class="field">
  <%= f.collection_check_boxes(:category_ids, Category.all, :id, :name, checked: product.categories.map(&:id)) do |b| %>	
  	<%= b.check_box %> <%= b.label %>
  <% end %>
</div>
```

```
def update
  respond_to do |format|
    if @product.update_attributes(product_params)
      format.html { redirect_to @product, notice: 'Product was successfully updated.' }
      format.json { render :show, status: :ok, location: @product }
    else
      format.html { render :edit }
      format.json { render json: @product.errors, status: :unprocessable_entity }
    end
  end
end
```

```
def product_params
  params.require(:product).permit(:name, :price, {category_ids: []})
end
```

http://railscasts.com/episodes/17-habtm-checkboxes?view=comments



