
D
Mass Assignment in Rails 5

## Steps
### Step 1

The new user registration page in `app/views/users/new.html.erb` has full name and password fields. 

```ruby
<%= form_for(@user) do |f| %>

  <div class="field">
    <%= f.label :full_name %>
    <%= f.text_field :full_name %>
  </div>

  <div class="field">
    <%= f.label :password %>
    <%= f.password_field :password %>
  </div>

  <div class="actions">
    <%= f.submit %>
  </div>
<% end %>
```

### Step 2

If you use `params[:user]` when creating the user record like this:

```ruby
def create
  User.create(params[:user])
  
  redirect_to users_path
end
```

You will get the error:

```sh
ActiveModel::ForbiddenAttributesError
```

### Step 3

Add `allowed_params` method to users controller.

```ruby
def allowed_params
  params.require(:user).permit(:full_name, :password)
end  
```

This method only allows the `full_name` and `password` fields in the user model. Use this method in the users controller.

```ruby
def create
  User.create(allowed_params)
  
  redirect_to users_path
end
```

We will now be able to register a new user. Note: The `attr_protected` was deprecated in Rails 2.3.8. Rails 4.0 has removed `attr_accessible` and `attr_protected` feature in favor of Strong Parameters.

## Summary

In this article, you learned how to use strong parameters that protects the Rails 5 web apps from mass assignment problems.


http://railscasts.com/episodes/26-hackers-love-mass-assignment?view=comments


-

schema

users table has admin column

-

create

User.new(params[:user])

-

curl -d "user[name]=hacker&user[admin]=1" localhost:3000/users

dev log

insert statment

Is admin set to true.

View the new user page and check if admin is yes

-

attr_protected :admin

curl -d "user[name]=hacker&user[admin]=1&user[comment_ids][]=1&user[comment_ids][]=2" localhost:3000/users

Changes the comments to comments owned by someone else.

-

attr_accessible :name


